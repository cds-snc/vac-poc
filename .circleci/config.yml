# Javascript Node CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      - image: circleci/node:9
      
      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/mongo:3.4.4

    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "package.json" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run: yarn install

      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "package.json" }}
        
      # run tests!
      - run: yarn test
      - run:
          command: node node_modules/eslint/bin/eslint.js pages components __tests__
          name: lint
      - run:
          command: ~/repo/.circleci/notify_failure.sh
          name: "Report failing Master"
          when: on_fail

  integration:
    docker:
      # the Docker image with Cypress dependencies
      - image: cypress/base:10
        environment:
          ## this enables colors in the output
          TERM: xterm
    working_directory: ~/app
    parallelism: 1
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-npm-deps-{{ checksum "package.json" }}
            - v1-npm-deps
      - run: npm install
      - save_cache:
          key: v1-npm-deps-{{ checksum "package.json" }}
          paths:
            - node_modules
      - run:
          name: Running E2E tests
          command: |
              yarn build
              yarn start &
              yarn cypress:wait
              yarn cypress:run
      - run:
          command: ~/repo/.circleci/notify_failure.sh
          name: "Report failing Master"
          when: on_fail

      - store_test_results:
          path: cypress-results
      - store_artifacts:
          path: cypress/videos
      - store_artifacts:
          path: cypress/screenshots

  deploy:
    docker:
      - image: docker:17.12.1-ce-git
    steps:
      - checkout:
          path: ~/repo
      - setup_remote_docker
      - run:
          command: |
              docker login -u "$DOCKER_USERNAME" -p "$DOCKER_PASSWORD"
              docker build  -t "${DOCKER_REGISTRY}/${NAMESPACE}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1}" -t "${DOCKER_REGISTRY}/${NAMESPACE}/${CIRCLE_PROJECT_REPONAME}:latest" --build-arg CIRCLE_SHA1="${CIRCLE_SHA1}" --build-arg SENTRY_DSN="${SENTRY_DSN}" --build-arg GA_UA="${GA_UA}" --build-arg CIRCLE_PROJECT_REPONAME="${CIRCLE_PROJECT_REPONAME}" --build-arg CIRCLE_BRANCH="${CIRCLE_BRANCH}" --build-arg CIRCLE_REPOSITORY_URL="${CIRCLE_REPOSITORY_URL}" --build-arg WEBHOOK_URL="${WEBHOOK_URL}" .
              docker push "${DOCKER_REGISTRY}/${NAMESPACE}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1}"
              docker push "${DOCKER_REGISTRY}/${NAMESPACE}/${CIRCLE_PROJECT_REPONAME}:latest"
          name: "Build and Deploy API Docker Image"
      - run:
          command: ~/repo/.circleci/notify_failure.sh
          name: "Report failing Master"
          when: on_fail

    working_directory: ~/repo
  update_ecs: 
    docker: 
      - image: "cdssnc/ecs-cli:latest"
    steps: 
      - checkout: 
          path: ~/repo
      - setup_remote_docker
      - run: 
         command: |
              cd deploy
              ecs-cli compose --file docker-compose.yml --ecs-params ecs-params.yml --cluster staging-ecs-cluster --project-name staging-vac-poc  service up --launch-type FARGATE --timeout 15
         name: "Update ECS Task"
      - run:
          command: ~/repo/.circleci/notify_failure.sh
          name: "Report failing Master"
          when: on_fail

    working_directory: ~/repo

workflows:
  version: 2
  build_and_deploy:
   jobs:
     - build
     - integration
     - deploy:
        requires:
         - build
         - integration
        filters:
          branches:
            only:
              - master
