version: 2.1

orbs:
  azure-aks: circleci/azure-aks@0.2.1
  kubernetes: circleci/kubernetes@0.4.0

jobs:
  create-aks-deployment:
    executor: azure-aks/default
    parameters:
      cluster-name:
        description: Name of the AKS cluster
        type: string
      resource-group:
        description: Resource group that the cluster is in
        type: string
      namespace:
        description: Namespace to use
        type: string
    steps:
      - checkout
      - azure-aks/update-kubeconfig-with-credentials:
          cluster-name: << parameters.cluster-name >>
          resource-group: << parameters.resource-group >>
          install-kubectl: true
          perform-login: true

  build_and_test:
    docker:
      - image: cypress/base:10
    working_directory: ~/repo

    steps:
      # checkout branch
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
            - v3-dependencies-{{ checksum "package.json" }}
            # fallback to using the latest cache if no exact match is found
            - v3-dependencies-
      # install app
      - run: yarn install
      - save_cache:
          paths:
            - node_modules
            - ~/.cache
            - /home/circleci/.cache
          key: v3-dependencies-{{ checksum "package.json" }}

      # run tests!
      - run:
          name: "Jest tests"
          command: yarn test -w2
      - run:
          name: "Linting"
          command: yarn lint
      - run:
          name: "Cypress"
          command: yarn cypress:ci
      - run:
          name: "Report failing master"
          command: ~/repo/.circleci/notify_failure.sh
          when: on_fail

  deployment_development_docker:
    docker:
      - image: docker:17.12.1-ce-git
    steps:
      - checkout
      - setup_remote_docker

      # Build the image
      - run:
          command: |
            docker build  -t "${DOCKER_REGISTRY}/${NAMESPACE}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1}" -t "${DOCKER_REGISTRY}/${NAMESPACE}/${CIRCLE_PROJECT_REPONAME}:latest" --build-arg CIRCLE_SHA1="${CIRCLE_SHA1}" --build-arg SENTRY_DSN="${SENTRY_DSN}" --build-arg GA_UA="${GA_UA}" --build-arg GA_UA_CDS="${GA_UA_CDS}" --build-arg CIRCLE_PROJECT_REPONAME="${CIRCLE_PROJECT_REPONAME}" --build-arg CIRCLE_BRANCH="${CIRCLE_BRANCH}" --build-arg CIRCLE_REPOSITORY_URL="${CIRCLE_REPOSITORY_URL}" --build-arg WEBHOOK_URL="${WEBHOOK_URL}" --build-arg AIRTABLE_READ_KEY="${AIRTABLE_READ_KEY}" .
          name: "Build Image"
      # Scan the image
      - run:
          command: |
            docker run -p 5432:5432 -d --name db arminc/clair-db:latest
            docker run -p 6060:6060 --link db:postgres -d --name clair arminc/clair-local-scan:v2.0.1
            docker run -v /var/run/docker.sock:/var/run/docker.sock -d --name clair-scanner veteransaffairscanada/clair-scanner:latest tail -f /dev/null
            clair_ip=`docker exec -it clair hostname -i | grep -oE '[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+'`
            scanner_ip=`docker exec -it clair-scanner hostname -i | grep -oE '[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+'`
            docker exec -it clair-scanner clair-scanner --ip ${scanner_ip} --clair=http://${clair_ip}:6060 -t High "${DOCKER_REGISTRY}/${NAMESPACE}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1}"
          name: "Scan image"
      # Deploy the image if passes the scan
      - run:
          command: |
            docker login -u "$DOCKER_USERNAME" -p "$DOCKER_PASSWORD"
            docker push "${DOCKER_REGISTRY}/${NAMESPACE}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1}"
            docker push "${DOCKER_REGISTRY}/${NAMESPACE}/${CIRCLE_PROJECT_REPONAME}:latest"
          name: "Push Docker Image"
      - run:
          command: apt-get install curl && ~/repo/.circleci/notify_failure.sh
          name: "Report failing Development"
          when: on_fail

    working_directory: ~/repo

  deployment_user_acceptance_docker:
    docker:
      - image: docker:17.12.1-ce-git
    steps:
      - checkout
      - setup_remote_docker
      # Build the image
      - run:
          command: |
            docker build  -t "${DOCKER_REGISTRY}/${NAMESPACE}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1}" -t "${DOCKER_REGISTRY}/${NAMESPACE}/${CIRCLE_PROJECT_REPONAME}:develop" --build-arg CIRCLE_SHA1="${CIRCLE_SHA1}" --build-arg SENTRY_DSN="${SENTRY_DSN}" --build-arg GA_UA="${GA_UA}" --build-arg GA_UA_CDS="${GA_UA_CDS}" --build-arg CIRCLE_PROJECT_REPONAME="${CIRCLE_PROJECT_REPONAME}" --build-arg CIRCLE_BRANCH="${CIRCLE_BRANCH}" --build-arg CIRCLE_REPOSITORY_URL="${CIRCLE_REPOSITORY_URL}" --build-arg WEBHOOK_URL="${WEBHOOK_URL}" --build-arg AIRTABLE_READ_KEY="${AIRTABLE_READ_KEY}" .
          name: "Build Image"
      # Scan the image
      - run:
          command: |
            docker run -p 5432:5432 -d --name db arminc/clair-db:latest
            docker run -p 6060:6060 --link db:postgres -d --name clair arminc/clair-local-scan:v2.0.1
            docker run -v /var/run/docker.sock:/var/run/docker.sock -d --name clair-scanner veteransaffairscanada/clair-scanner:latest tail -f /dev/null
            clair_ip=`docker exec -it clair hostname -i | grep -oE '[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+'`
            scanner_ip=`docker exec -it clair-scanner hostname -i | grep -oE '[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+'`
            docker exec -it clair-scanner clair-scanner --ip ${scanner_ip} --clair=http://${clair_ip}:6060 -t High "${DOCKER_REGISTRY}/${NAMESPACE}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1}"
          name: "Scan image"
      # Deploy the image if passes the scan
      - run:
          name: "What branch am I on?"
          command: echo ${CIRCLE_BRANCH}
      - run:
          command: |

            if [ "${CIRCLE_BRANCH}" == "develop" ]; then
              docker login -u "$DOCKER_USERNAME" -p "$DOCKER_PASSWORD"
              docker push "${DOCKER_REGISTRY}/${NAMESPACE}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1}"
              docker push "${DOCKER_REGISTRY}/${NAMESPACE}/${CIRCLE_PROJECT_REPONAME}:develop"
            fi

          name: "Push Docker Image"
      - run:
          command: apt-get install curl && ~/repo/.circleci/notify_failure.sh
          name: "Report failing UA branch"
          when: on_fail

    working_directory: ~/repo

  release:
    docker:
      - image: docker:17.12.1-ce-git
    steps:
      - checkout:
          path: ~/repo
      - setup_remote_docker

      # get version
      #- run:
      #    name: "What is next release semvar version"
      #    command: echo export TAG=$(~/repo/.circleci/get-semvar.sh) >> $BASH_ENV
      #- run:
      #    name: "Next version increment"
      #    command: echo ${TAG}

      # Build the image
      - run:
          command: |
            docker build  -t "${DOCKER_REGISTRY}/${NAMESPACE}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1}" -t "${DOCKER_REGISTRY}/${NAMESPACE}/${CIRCLE_PROJECT_REPONAME}:v1.0.0" --build-arg CIRCLE_SHA1="${CIRCLE_SHA1}" --build-arg SENTRY_DSN="${SENTRY_DSN}" --build-arg GA_UA="${GA_UA}" --build-arg GA_UA_CDS="${GA_UA_CDS}" --build-arg CIRCLE_PROJECT_REPONAME="${CIRCLE_PROJECT_REPONAME}" --build-arg CIRCLE_BRANCH="${CIRCLE_BRANCH}" --build-arg CIRCLE_REPOSITORY_URL="${CIRCLE_REPOSITORY_URL}" --build-arg WEBHOOK_URL="${WEBHOOK_URL}" --build-arg AIRTABLE_READ_KEY="${AIRTABLE_READ_KEY}" .
          name: "Build Image"
      # Scan the image
      - run:
          command: |
            docker run -p 5432:5432 -d --name db arminc/clair-db:latest
            docker run -p 6060:6060 --link db:postgres -d --name clair arminc/clair-local-scan:v2.0.1
            docker run -v /var/run/docker.sock:/var/run/docker.sock -d --name clair-scanner veteransaffairscanada/clair-scanner:latest tail -f /dev/null
            clair_ip=`docker exec -it clair hostname -i | grep -oE '[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+'`
            scanner_ip=`docker exec -it clair-scanner hostname -i | grep -oE '[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+'`
            docker exec -it clair-scanner clair-scanner --ip ${scanner_ip} --clair=http://${clair_ip}:6060 -t High "${DOCKER_REGISTRY}/${NAMESPACE}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1}"
          name: "Scan image"
      # Deploy the image if passes the scan
      - run:
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              docker login -u "$DOCKER_USERNAME" -p "$DOCKER_PASSWORD"
              docker push "${DOCKER_REGISTRY}/${NAMESPACE}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1}"
              docker push "${DOCKER_REGISTRY}/${NAMESPACE}/${CIRCLE_PROJECT_REPONAME}:v1.0.0"
            fi
          name: "Push Docker Image"
      #- run: npx semantic-release
      - run:
          command: apt-get install curl && ~/repo/.circleci/notify_failure.sh
          name: "Report failing Master"
          when: on_fail

    working_directory: ~/repo

workflows:
  build_test_deploy_release:
    jobs:
      - build_and_test
      - deployment_development_docker:
          requires:
            - build_and_test
      - deployment_user_acceptance_docker:
          requires:
            - build_and_test
          filters:
            branches:
              only: develop
      - release:
          requires:
            - build_and_test
          filters:
            branches:
              only: master
            tags:
              only: /(?<=^[Vv]|^)(?:(?<major>(?:0|[1-9](?:(?:0|[1-9])+)*))[.](?<minor>(?:0|[1-9](?:(?:0|[1-9])+)*))[.](?<patch>(?:0|[1-9](?:(?:0|[1-9])+)*))(?:-(?<prerelease>(?:(?:(?:[A-Za-z]|-)(?:(?:(?:0|[1-9])|(?:[A-Za-z]|-))+)?|(?:(?:(?:0|[1-9])|(?:[A-Za-z]|-))+)(?:[A-Za-z]|-)(?:(?:(?:0|[1-9])|(?:[A-Za-z]|-))+)?)|(?:0|[1-9](?:(?:0|[1-9])+)*))(?:[.](?:(?:(?:[A-Za-z]|-)(?:(?:(?:0|[1-9])|(?:[A-Za-z]|-))+)?|(?:(?:(?:0|[1-9])|(?:[A-Za-z]|-))+)(?:[A-Za-z]|-)(?:(?:(?:0|[1-9])|(?:[A-Za-z]|-))+)?)|(?:0|[1-9](?:(?:0|[1-9])+)*)))*))?(?:[+](?<build>(?:(?:(?:[A-Za-z]|-)(?:(?:(?:0|[1-9])|(?:[A-Za-z]|-))+)?|(?:(?:(?:0|[1-9])|(?:[A-Za-z]|-))+)(?:[A-Za-z]|-)(?:(?:(?:0|[1-9])|(?:[A-Za-z]|-))+)?)|(?:(?:0|[1-9])+))(?:[.](?:(?:(?:[A-Za-z]|-)(?:(?:(?:0|[1-9])|(?:[A-Za-z]|-))+)?|(?:(?:(?:0|[1-9])|(?:[A-Za-z]|-))+)(?:[A-Za-z]|-)(?:(?:(?:0|[1-9])|(?:[A-Za-z]|-))+)?)|(?:(?:0|[1-9])+)))*))?)$/
  deployment_aks_lab:
    jobs:
      - build_and_test
      - create-aks-deployment:
          cluster-name: ${AKS_CLUSTERNAME_DEV}
          resource-group: ${AKS_RESOURCE_GROUP}
          namespace: "lab"
      - azure-aks/update-container-image:
          cluster-name: ${AKS_CLUSTERNAME_DEV}
          resource-group: ${AKS_RESOURCE_GROUP}
          namespace: "lab"
          resource-name: ${AKS_DEPLOYMENT_LAB}
          container-image-updates: "vac-benefits-directory=veteransaffairscanada/vac-benefits-directory:latest"
          record: true
          requires:
            - build_and_test
